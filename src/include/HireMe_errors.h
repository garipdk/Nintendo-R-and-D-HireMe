#ifndef HireMe_errors
#define HireMe_errors

#include <string.h>

#define error_solver (\
    "You need to precise the solving function you want to use : \n"\
    "\t'BASE' : solving for a given input (find the input back from the modified input of Forward).\n"\
    "\t'ALLIT' : solving for a given target (16 chars) by conputing all input possible at the end of Forward and goig back like with 'BASE' Iteratively.\n"\
    "\t'ALLRAND': same as 'ALL IT' but the the input possible at the end of Forward is chosen randomly.\n"\
    "\t'GENETIC' : a gentic implemantation with selection/reproduction/mutation/regular random input.\n"\
    "\t'RAND' : a totaly random implemantation -> each itteration a random input is created and tested with Forward.\n"\
    "Currently the only true solver working is the 'ALLIT' ('BASE' somewhat works too but it is not a solver).\n"\
    )
#define error_base (\
    "The command must be executed like so :\n"\
    "    ./HireMe BASE <Print_Mode> <input>\n"\
    "Where :\n"\
    "\t<Print_Mode> Can Be only one of the following :\n"\
    "\t\t- A : All.\n"\
    "\t\t- C : Coherents only\n"\
    "\t\t\t  (start with only coherents alphanumeric ascii letter and ends with a 0x00 (at or before the 32th char)).\n"\
    "\t\t- N : Non coherents only.\n"\
    "\t\t- O : None and allows the use of a Simplified Forward (for the end verification because the rest is already it) for time calculation purposes.\n"\
    "\t<input> Is the input wanted to be generated by my Backward function from the input state at the end of the forward function must be at least 31 chars long\n"\
    "\t\t   (the first 0x00 must be at least at the 32th char\n"\
    "\t\t    (because the 32 chars are a must and I don't think C args can be processed with a 0x00 befor the end of the string)).\n"\
    )
#define error_allit (\
    "The command must be executed like so :\n"\
    "    ./HireMe ALLIT <Print_Mode> <target> <number_of_input> \n"\
    "Where :\n"\
    "\t<Print_Mode> Can Be only one of the following :\n"\
    "\t\t- A : All.\n"\
    "\t\t- C : Coherents only\n"\
    "\t\t\t  (start with only coherents alphanumeric ascii letter and ends with a 0x00 (at or before the 32th char)).\n"\
    "\t\t- N : Non coherents only.\n"\
    "\t\t- O : None and allows the use of a Simplified Forward (for the end verification because the rest is already it) for time calculation purposes.\n"\
    "\t<target> Is the target whanted to be generated by the Forward function must be at least 15 chars long\n"\
    "\t\t   (the first 0x00 must be at least at the 16th char).\n"\
    "\t<number_of_input> The number of generated input wanted (between 1 and MAX u128).\n"\
    )
#define error_allrand (\
    "The command must be executed like so :\n"\
    "    ./HireMe ALLRAND <Print_Mode> <target> <number_of_input> \n"\
    "Where :\n"\
    "\t<Print_Mode> Can Be only one of the following :\n"\
    "\t\t- A : All.\n"\
    "\t\t- C : Coherents only\n"\
    "\t\t\t  (start with only coherents alphanumeric ascii letter and ends with a 0x00 (at or before the 32th char)).\n"\
    "\t\t- N : Non coherents only.\n"\
    "\t\t- O : None and allows the use of a Simplified Forward (for the end verification because the rest is already it) for time calculation purposes.\n"\
    "\t<target> Is the target whanted to be generated by the Forward function must be at least 15 chars long\n"\
    "\t\t   (the first 0x00 must be at least at the 16th char).\n"\
    "\t<number_of_input> The number of generated input wanted (between 1 and MAX u128).\n"\
    )
#define error_genetic (\
    "The command must be executed like so :\n"\
    "    ./HireMe GENETIC <Print_Mode> <target> <pool_size> <number_of_input> <elimination_size> <reproduce_size>\n"\
    "Where :\n"\
    "\t<Print_Mode> Can Be only one of the following :\n"\
    "\t\t- A : All.\n"\
    "\t\t- C : Coherents only\n"\
    "\t\t\t  (start with only coherents alphanumeric ascii letter and ends with a 0x00 (at or before the 32th char)).\n"\
    "\t\t- N : Non coherents only.\n"\
    "\t\t- O : None and allows the use of a Simplified Forward (for the end verification because the rest is already it) for time calculation purposes.\n"\
    "\t<target> Is the target whanted to be generated by the Forward function must be at least 15 chars long\n"\
    "\t\t   (the first 0x00 must be at least at the 16th char).\n"\
    "\t<pool_size> The size of the genetic solution pool (between 2 and UINT_MAX).\n"\
    "\t<number_of_input> The number of generated input wanted (between 1 and <pool_size>).\n"\
    "\t<elimination_size> The number of elements in the pool that will be eliminated (between 1 and <pool_size> - 1).n"\
    "\t<reproduce_size> The number of elements in the pool that will reproduce (between 1 and <pool_size>/3).\n"\
    )
#define error_rand (\
    "The command must be executed like so :\n"\
    "    ./HireMe RAND <Print_Mode> <target>\n"\
    "Where :\n"\
    "\t<Print_Mode> Can Be only one of the following :\n"\
    "\t\t- A : All.\n"\
    "\t\t- C : Coherents only\n"\
    "\t\t\t  (start with only coherents alphanumeric ascii letter and ends with a 0x00 (at or before the 32th char)).\n"\
    "\t\t- N : Non coherents only.\n"\
    "\t\t- O : None and allows the use of a Simplified Forward (for the end verification because the rest is already it) for time calculation purposes.\n"\
    "\t<target> Is the target whanted to be generated by the Forward function must be at least 15 chars long\n"\
    "\t\t   (the first 0x00 must be at least at the 16th char).\n"\
    "\t<number_of_input> The number of generated input wanted (between 1 and MAX u128).\n"\
    )
#define err_target (\
    "<target> Must be at least 15 chars long (the first 0x00 must be at least at the 16th char).\n"\
    )
#define err_input (\
    "<input> Must be at least 31 chars long (the first 0x00 must be at least at the 32th char).\n"\
    )
#define err_print_mode (\
    "<Print_Mode> Can Be only 'A', 'C', 'N' or 'O'.\n"\
    )
#define error_pool_size (\
    "<pool_size> Must be at least 2 at most UINT_MAX.\n"\
    )
#define err_input_num_gen (\
    "<number_of_input> Must be at least 1 at most <pool_size>.\n"\
    )
#define err_input_num (\
    "<number_of_input> Must be at least 1 at most MAX u128.\n"\
    )
#define error_elimination_size (\
    "<elimination_size> Must be at least 1 at most <pool_size> - 1.\n"\
    )
#define error_reproduce_size (\
    "<reproduce_size> Must be at least 1 and must be less than <pool_size>/3.\n"\
    )

#endif // HireMe_errors